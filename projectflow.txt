Building Pipeline:
1. create a github repo and clone it in local (add experiments).
2. add src folder along with all components (run them individually).
3. add data, models, report directories to .gitigonre file.
4. now git add, commit, push.


Setting up DVC Pipeline (without params):
5. create dvc.yaml file and add stages to it
6. dvc init then do dvc repro to test the pipeline automation (check dvc dag)
7. now git add, commit, push


Setting up DVC Pipeline (with params):
8. add params.yaml file
9. add the params setup (mentioned below)
10. do "dvc repro" again to test the pipeline along with the params
11. now git add, commit, push

*********************************************************************************************
params.yaml setup:
    1. import yaml
    2. add func
        def load_params(params_path: str) -> dict:
            """Load parameters from a YAML file."""
            try:
                with open(params_path, 'r') as file:
                    params = yaml.safe_load(file)
                logger.debug('Parameters retrieved from %s', params_path)
                return params
            except FileNotFoundError:
                logger.error('File not found: %s', params_path)
                raise
            except yaml.YAMLError as e:
                logger.error('YAML error: %s', e)
                raise
            except Exception as e:
                logger.error('Unexpected error: %s', e)
                raise
*********************************************************************************************

Experiments on your project with DVC:
EXPERIMENT TRACKING: We can compare the results of different experiments on our pipeline and then can reproduce the pipeline with the best parameters.

12. pip install dvclive (extension of DVC)
13. add the dvclive code block which is mentioned below:
        dvclive code block:
        1> import dvclive and yaml:
        from dvclive import Live
        2> Add the load_params function and initiate "params" var in main
        3> Add below code block to main:
        with Live(save_dvc_exp=True) as live:
            live.log_metric('accuracy', accuracy_score(y_test, y_test))
            live.log_metric('precision', precision_score(y_test, y_test))
            live.log_metric('recall', recall_score(y_test, y_test))
            live.log_params(params)


            """"In the above code we are importing params because we also have to know about the params on which our metrics are the best.""""


14. Do "dvc exp run", it will create a new dvc.yaml(if already not there) and dvclive directory (each run will be considered as an experiment by DVC)
15. Do "dvc exp show" on terminal to see the experiments or use extension on VSCode (install dvc extension)
16. Do "dvc exp remove {exp-name}" to remove exp (optional) | "dvc exp apply {exp-name}" to reproduce prev exp
17. Change params, re-run code (produce new experiments)
18. Now git add, commit, push
